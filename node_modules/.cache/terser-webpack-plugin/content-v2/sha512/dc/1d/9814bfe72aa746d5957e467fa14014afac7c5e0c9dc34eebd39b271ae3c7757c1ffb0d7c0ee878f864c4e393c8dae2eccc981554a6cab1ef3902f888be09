{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{169:function(s,n,e){\"use strict\";e.r(n);var a=e(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,n=s.$createElement,e=s._self._c||n;return e(\"div\",{staticClass:\"content\"},[e(\"h1\",{attrs:{id:\"异步编程方案\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#异步编程方案\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 异步编程方案\")]),s._v(\" \"),e(\"h2\",{attrs:{id:\"_1、回调函数（callback）\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、回调函数（callback）\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 1、回调函数（Callback）\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"回调函数是异步操作最基本的方法。以下代码就是一个回调函数的例子：\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"ajax(url, () => {\\n    // 处理逻辑\\n})\\n\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\")])]),e(\"ul\",[e(\"li\",[s._v(\"弱点：就是容易写出回调地狱（Callback hell）。假设多个请求存在依赖性，你可能就会写出如下代码：\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"ajax(url, () => {\\n    // 处理逻辑\\n    ajax(url1, () => {\\n        // 处理逻辑\\n        ajax(url2, () => {\\n            // 处理逻辑\\n        })\\n    })\\n})\\n\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\")])]),e(\"ul\",[e(\"li\",[s._v(\"优点是简单、容易理解和实现，缺点是不利于代码的阅读和维护，各个部分之间高度耦合，使得程序结构混乱、流程难以追踪（尤其是多个回调函数嵌套的情况），而且每个任务只能指定一个回调函数。\")])]),s._v(\" \"),e(\"h2\",{attrs:{id:\"_2-事件监听\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-事件监听\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 2. 事件监听\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"在这种方式下：异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v('这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以\"去耦合\"，有利于实现模块化。')])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。阅读代码的时候，很难看出主流程。\")])])]),s._v(\" \"),e(\"h2\",{attrs:{id:\"_3-发布订阅\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-发布订阅\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 3. 发布订阅\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v('我们假定，存在一个\"信号中心\"，某个任务执行完成，就向信号中心\"发布\"（publish）一个信号，其他任务可以向信号中心\"订阅\"（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做\"发布/订阅模式\"（publish-subscribe pattern），又称\"观察者模式\"（observer pattern）。')])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"\\x3c!--首先，f2向信号中心jQuery订阅done信号。--\\x3e\\njQuery.subscribe('done', f2);\\n\\x3c!--然后，f1进行如下改写：--\\x3e\\nfunction f1() {\\n  setTimeout(function () {\\n    // ...\\n    jQuery.publish('done');\\n  }, 1000);\\n}\\n\\x3c!--上面代码中，jQuery.publish('done')的意思是，f1执行完成后，向信号中心jQuery发布done信号，从而引发f2的执行。 f2完成执行后，可以取消订阅（unsubscribe）--\\x3e\\njQuery.unsubscribe('done', f2);\\n\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\")])]),e(\"h2\",{attrs:{id:\"_4-promise-a\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-promise-a\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 4. Promise/A+\")]),s._v(\" \"),e(\"h3\",{attrs:{id:\"_1-promise的三种状态\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-promise的三种状态\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 1. Promise的三种状态\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"Pending----Promise对象实例创建时候的初始状态\")]),s._v(\" \"),e(\"li\",[s._v(\"Fulfilled----成功的操作，为表述方便，fulfilled 使用 resolved 代替\")]),s._v(\" \"),e(\"li\",[s._v(\"Rejected----可以理解为失败的状态\")])]),s._v(\" \"),e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/1/6/16821592df2d2d58?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"image\"}})]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"pending可以转化为fulfilled或rejected并且只能转化一次，也就是说如果pending转化到fulfilled状态，那么就不能再转化到rejected。并且fulfilled和rejected状态只能由pending转化而来，两者之间不能互相转换。\")])]),s._v(\" \"),e(\"h3\",{attrs:{id:\"_2-promise的链式调用\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-promise的链式调用\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 2. promise的链式调用\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"每次调用返回的都是一个新的Promise实例(这就是then可用链式调用的原因)\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"如果then中返回的是一个结果的话会把这个结果传递下一次then中的成功回调\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"如果then中出现异常,会走下一个then的失败回调\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"在 then中使用了return，那么 return 的值会被Promise.resolve() 包装(见例1，2)\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"then中可以不传递参数，如果不传递会透到下一个then中(见例3)\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"catch 会捕获到没有捕获的异常\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"example:\")])])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"// 例1\\nPromise.resolve(1)\\n.then(res => {\\nconsole.log(res)\\nreturn 2 //包装成 Promise.resolve(2)\\n})\\n.catch(err => 3)\\n.then(res => console.log(res))\\n\\n// result:\\n1\\n2\\nPromise:{<resolved>: undefined}\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\")])]),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"// 例3\\nlet fs = require('fs')\\nfunction read(url) {\\n  return new Promise((resolve, reject) => {\\n    fs.readFile(url, 'utf8', (err, data) => {\\n      if (err) reject(err)\\n      resolve(data)\\n    })\\n  })\\n}\\nread('./name.txt')\\n  .then(function(data) {\\n    throw new Error() //then中出现异常,会走下一个then的失败回调\\n  }) //由于下一个then没有失败回调，就会继续往下找，如果都没有，就会被catch捕获到\\n  .then(function(data) {\\n    console.log('data')\\n  })\\n  .then()\\n  .then(null, function(err) {\\n    console.log('then', err)// then error\\n  })\\n  .catch(function(err) {\\n    console.log('error')\\n  })\\n\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),e(\"br\")])]),e(\"h2\",{attrs:{id:\"_5-生成器generators-yield\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-生成器generators-yield\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 5. 生成器Generators/ yield\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同，Generator 最大的特点就是可以控制函数的执行。\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。\")]),s._v(\" \"),e(\"li\",[s._v(\"Generator 函数除了状态机，还是一个遍历器对象生成函数。\")]),s._v(\" \"),e(\"li\",[s._v(\"可暂停函数, yield可暂停，next方法可启动，每次返回的是yield后的表达式结果。\")]),s._v(\" \"),e(\"li\",[s._v(\"yield表达式本身没有返回值，或者说总是返回undefined。next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值。\")])])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"example:\")])])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"function *foo(x) {\\n  let y = 2 * (yield (x + 1))\\n  let z = yield (y / 3)\\n  return (x + y + z)\\n}\\nlet it = foo(5)\\nconsole.log(it.next())   // => {value: 6, done: false}\\nconsole.log(it.next(12)) // => {value: 8, done: false}\\nconsole.log(it.next(13)) // => {value: 42, done: true}\\n\\n// 首先 Generator 函数调用和普通函数不同，它会返回一个迭代器\\n// 当执行第一次 next 时，传参会被忽略，并且函数暂停在 yield (x + 1) 处，所以返回 5 + 1 = 6\\n// 当执行第二次 next 时，传入的参数12就会被当作上一个yield表达式的返回值，如果你不传参，yield 永远返回 undefined。此时 let y = 2 * 12，所以第二个 yield 等于 2 * 12 / 3 = 8\\n// 当执行第三次 next 时，传入的参数13就会被当作上一个yield表达式的返回值，所以 z = 13, x = 5, y = 24，相加等于 42\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\")])]),e(\"ul\",[e(\"li\",[s._v(\"从上例中我们看出手动迭代Generator 函数很麻烦，实现逻辑有点绕，而实际开发一般会配合 co 库去使用。co是一个为Node.js和浏览器打造的基于生成器的流程控制工具，借助于Promise，你可以使用更加优雅的方式编写非阻塞代码。\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"// npm install co\\nfunction* r() {\\n  let r1 = yield read('./1.txt')\\n  let r2 = yield read(r1)\\n  let r3 = yield read(r2)\\n  console.log(r1)\\n  console.log(r2)\\n  console.log(r3)\\n}\\nlet co = require('co')\\nco(r()).then(function(data) {\\n  console.log(data)\\n})\\n// 2.txt=>3.txt=>结束=>undefined\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\")])]),e(\"h2\",{attrs:{id:\"_6-async-await\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-async-await\",\"aria-hidden\":\"true\"}},[s._v(\"#\")]),s._v(\" 6. async/await\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"Async/Await简介:\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"async/await是基于Promise实现的，它不能用于普通的回调函数。\")]),s._v(\" \"),e(\"li\",[s._v(\"async/await与Promise一样，是非阻塞的。\")]),s._v(\" \"),e(\"li\",[s._v(\"async/await使得异步代码看起来像同步代码，这正是它的魔力所在。\")])])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"一个函数如果加上 async ，那么该函数就会返回一个 Promise\")])])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v('async function async1() {\\n  return \"1\"\\n}\\nconsole.log(async1()) // -> Promise {<resolved>: \"1\"}\\n')])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\")])]),e(\"ul\",[e(\"li\",[s._v(\"Async/Await并发请求:\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language- line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[e(\"code\",[s._v(\"let fs = require('fs')\\nfunction read(file) {\\n  return new Promise(function(resolve, reject) {\\n    fs.readFile(file, 'utf8', function(err, data) {\\n      if (err) reject(err)\\n      resolve(data)\\n    })\\n  })\\n}\\nfunction readAll() {\\n  read1()\\n  read2()//这个函数同步执行\\n}\\nasync function read1() {\\n  let r = await read('1.txt','utf8')\\n  console.log(r)\\n}\\nasync function read2() {\\n  let r = await read('2.txt','utf8')\\n  console.log(r)\\n}\\nreadAll() // 2.txt 3.txt\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),e(\"br\")])])])}],!1,null,null,null);n.default=r.exports}}]);","extractedComments":[]}