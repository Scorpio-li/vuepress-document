(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{216:function(e,a,i){"use strict";i.r(a);var r=i(0),t=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,i=e._self._c||a;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"浏览器的缓存机制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的缓存机制","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器的缓存机制")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("缓存可以说是性能优化中简单高效的一种优化方式了。")])]),e._v(" "),i("li",[i("p",[e._v("一个优秀的缓存策略可以缩短网页请求资源的距离，减少延迟，并且由于缓存文件可以重复利用，还可以减少带宽，降低网络负荷。")])])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-8e74b69ad9376710?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp",alt:"image"}})]),e._v(" "),i("h2",{attrs:{id:"缓存位置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置","aria-hidden":"true"}},[e._v("#")]),e._v(" 缓存位置")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("从缓存位置上来说分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。")]),e._v(" "),i("ol",[i("li",[e._v("Service Worker")]),e._v(" "),i("li",[e._v("Memory Cache")]),e._v(" "),i("li",[e._v("Disk Cache")]),e._v(" "),i("li",[e._v("Push Cache")])])])]),e._v(" "),i("h3",{attrs:{id:"_1-service-worker"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-service-worker","aria-hidden":"true"}},[e._v("#")]),e._v(" 1.Service Worker")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。")])]),e._v(" "),i("li",[i("p",[e._v("使用 Service Worker的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。")])]),e._v(" "),i("li",[i("p",[e._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。")])]),e._v(" "),i("li",[i("p",[e._v("Service Worker 实现缓存功能一般分为三个步骤：")]),e._v(" "),i("ol",[i("li",[i("p",[e._v("首先需要先注册 Service Worker，")])]),e._v(" "),i("li",[i("p",[e._v("然后监听到 install 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。")])]),e._v(" "),i("li",[i("p",[e._v("如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。")])])])])]),e._v(" "),i("h3",{attrs:{id:"_2-memory-cache"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-memory-cache","aria-hidden":"true"}},[e._v("#")]),e._v(" 2.Memory Cache")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经抓取到的资源,例如页面上已经下载的样式、脚本、图片等。")])]),e._v(" "),i("li",[i("p",[e._v("读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")])]),e._v(" "),i("li",[i("p",[e._v("内存缓存在缓存资源时并不关心返回资源的HTTP缓存头Cache-Control是什么值，同时资源的匹配也并非仅仅是对URL做匹配，还可能会对Content-Type，CORS等其他特征做校验。")])])]),e._v(" "),i("h3",{attrs:{id:"_3-disk-cache"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-disk-cache","aria-hidden":"true"}},[e._v("#")]),e._v(" 3.Disk Cache")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。")])]),e._v(" "),i("li",[i("p",[e._v("Disk Cache 覆盖面基本是最大的。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。")])])]),e._v(" "),i("h3",{attrs:{id:"_4-push-cache"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-push-cache","aria-hidden":"true"}},[e._v("#")]),e._v(" 4.Push Cache")]),e._v(" "),i("ul",[i("li",[e._v("Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在Chrome浏览器中只有5分钟左右，同时它也并非严格执行HTTP头中的缓存指令。")])]),e._v(" "),i("hr"),e._v(" "),i("h2",{attrs:{id:"浏览器缓存策略"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存策略","aria-hidden":"true"}},[e._v("#")]),e._v(" 浏览器缓存策略")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("缓存策略都是通过设置 HTTP Header 来实现的")])]),e._v(" "),i("li",[i("p",[e._v("根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分")])])]),e._v(" "),i("h3",{attrs:{id:"强缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#强缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),i("p",[e._v("不会向服务器发送请求，直接从缓存中读取资源，在chrome控制台的Network选项中可以看到该请求返回200的状态码，并且Size显示from disk cache或from memory cache。强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache-Control。")]),e._v(" "),i("ol",[i("li",[i("p",[e._v("Expires")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。")])]),e._v(" "),i("li",[i("p",[e._v("Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。Expires: Wed, 22 Oct 2018 08:41:00 GMT表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。")])])])]),e._v(" "),i("li",[i("p",[e._v("Cache-Control")]),e._v(" "),i("ul",[i("li",[i("p",[e._v("在HTTP/1.1中，Cache-Control是最重要的规则，主要用于控制网页缓存。比如当Cache-Control:max-age=300时，则代表在这个请求正确返回时间（浏览器也会记录下来）的5分钟内再次加载资源，就会命中强缓存。")])]),e._v(" "),i("li",[i("p",[e._v("Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令：")])])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-8ff981603cdfded0?imageMogr2/auto-orient/strip%7CimageView2/2/w/562/format/webp",alt:"image"}})]),e._v(" "),i("ul",[i("li",[i("p",[e._v("public: 所有内容都将被缓存（客户端和代理服务器都可缓存）。具体来说响应可被任何中间节点缓存，如 Browser <-- proxy1 <--  proxy2 <-- Server，中间的proxy可以缓存资源，比如下次再请求同一资源proxy1直接把自己缓存的东西给 Browser 而不再向proxy2要。")])]),e._v(" "),i("li",[i("p",[e._v("private：所有内容只有客户端可以缓存，Cache-Control的默认取值。具体来说，表示中间节点不允许缓存，对于Browser <-- proxy1 <--  proxy2 <-- Server，proxy 会老老实实把Server 返回的数据发送给proxy1,自己不缓存任何数据。当下次Browser再次请求时proxy会做好请求转发而不是自作主张给自己缓存的数据。")])]),e._v(" "),i("li",[i("p",[e._v("no-cache：客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定。表示不使用 Cache-Control的缓存控制方式做前置验证，而是使用 Etag 或者Last-Modified字段来控制缓存。需要注意的是，no-cache这个名字有一点误导。设置了no-cache之后，并不是说浏览器就不再缓存数据，只是浏览器在使用缓存数据时，需要先确认一下数据是否还跟服务器保持一致。")])]),e._v(" "),i("li",[i("p",[e._v("no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")])]),e._v(" "),i("li",[i("p",[e._v("max-age：max-age=xxx (xxx is numeric)表示缓存内容将在xxx秒后失效")])]),e._v(" "),i("li",[i("p",[e._v("s-maxage（单位为s)：同max-age作用一样，只在代理服务器中生效（比如CDN缓存）。比如当s-maxage=60时，在这60秒中，即使更新了CDN的内容，浏览器也不会进行请求。max-age用于普通缓存，而s-maxage用于代理缓存。s-maxage的优先级高于max-age。如果存在s-maxage，则会覆盖掉max-age和Expires header。")])]),e._v(" "),i("li",[i("p",[e._v("max-stale：能容忍的最大过期时间。max-stale指令标示了客户端愿意接收一个已经过期了的响应。如果指定了max-stale的值，则最大容忍时间为对应的秒数。如果没有指定，那么说明浏览器愿意接收任何age的响应（age表示响应由源站生成或确认的时间与当前时间的差值）。")])]),e._v(" "),i("li",[i("p",[e._v("min-fresh：能够容忍的最小新鲜度。min-fresh标示了客户端不愿意接受新鲜度不多于当前的age加上min-fresh设定的时间之和的响应。")])])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-3fa81f5e9efac5af?imageMogr2/auto-orient/strip%7CimageView2/2/w/820/format/webp",alt:"image"}})])]),e._v(" "),i("li",[i("p",[e._v("Expires和Cache-Control两者对比")])])]),e._v(" "),i("ul",[i("li",[i("p",[e._v("其实这两者差别不大，区别就在于 Expires 是http1.0的产物，Cache-Control是http1.1的产物，两者同时存在的话，Cache-Control优先级高于Expires；在某些不支持HTTP1.1的环境下，Expires就会发挥用处。所以Expires其实是过时的产物，现阶段它的存在只是一种兼容性的写法。")])]),e._v(" "),i("li",[i("p",[e._v("强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容，那我们如何获知服务器端内容是否已经发生了更新呢？此时我们需要用到协商缓存策略。")])])]),e._v(" "),i("h3",{attrs:{id:"协商缓存"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),i("p",[e._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况：")]),e._v(" "),i("ul",[i("li",[e._v("协商缓存生效，返回304和Not Modified")])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-660fd163329d080b?imageMogr2/auto-orient/strip%7CimageView2/2/w/709/format/webp",alt:"image"}})]),e._v(" "),i("ul",[i("li",[e._v("协商缓存失效，返回200和请求结果")])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-24953079cfebf2bf?imageMogr2/auto-orient/strip%7CimageView2/2/w/666/format/webp",alt:"image"}})]),e._v(" "),i("ul",[i("li",[e._v("协商缓存可以通过设置两种 HTTP Header 实现：Last-Modified 和 ETag 。")])]),e._v(" "),i("ol",[i("li",[i("p",[e._v("Last-Modified和If-Modified-Since：")]),e._v(" "),i("ul",[i("li",[e._v("浏览器在第一次访问资源时，服务器返回资源的同时，在response header中添加 Last-Modified的header，值是这个资源在服务器上的最后修改时间，浏览器接收后缓存文件和header；")])]),e._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[e._v("Last-Modified: Fri, 22 Jul 2016 01:47:00 GMT\n")])]),e._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[e._v("1")]),i("br")])]),i("ul",[i("li",[e._v("浏览器下一次请求这个资源，浏览器检测到有 Last-Modified这个header，于是添加If-Modified-Since这个header，值就是Last-Modified中的值；服务器再次收到这个资源请求，会根据 If-Modified-Since 中的值与服务器中这个资源的最后修改时间对比，如果没有变化，返回304和空的响应体，直接从缓存读取，如果If-Modified-Since的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和200")])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-bb7148a4431ccda1?imageMogr2/auto-orient/strip%7CimageView2/2/w/438/format/webp",alt:"image"}})]),e._v(" "),i("ul",[i("li",[e._v("Last-Modified 存在一些弊端：\n"),i("ul",[i("li",[i("p",[e._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源")])]),e._v(" "),i("li",[i("p",[e._v("因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源")])])])])])])]),e._v(" "),i("ul",[i("li",[e._v("既然根据文件修改时间来决定是否缓存尚有不足，能否可以直接根据文件内容是否修改来决定缓存策略？所以在 HTTP / 1.1 出现了 ETag 和If-None-Match")])]),e._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[i("p",[e._v("ETag和If-None-Match")]),e._v(" "),i("ul",[i("li",[e._v("Etag是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag就会重新生成。浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的Etag值放到request header里的If-None-Match里，服务器只需要比较客户端传来的If-None-Match跟自己服务器上该资源的ETag是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现ETag匹配不上，那么直接以常规GET 200回包形式将新的资源（当然也包括了新的ETag）发给客户端；如果ETag是一致的，则直接返回304知会客户端直接使用本地缓存即可。")])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-2fd8f5306b4e6767?imageMogr2/auto-orient/strip%7CimageView2/2/w/546/format/webp",alt:"image"}})]),e._v(" "),i("ul",[i("li",[i("p",[e._v("两者之间对比：")]),e._v(" "),i("ol",[i("li",[i("p",[e._v("首先在精确度上，Etag要优于Last-Modified。Last-Modified的时间单位是秒，如果某个文件在1秒内改变了多次，那么他们的Last-Modified其实并没有体现出来修改，但是Etag每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的Last-Modified也有可能不一致。")])]),e._v(" "),i("li",[i("p",[e._v("第二在性能上，Etag要逊于Last-Modified，毕竟Last-Modified只需要记录时间，而Etag需要服务器通过算法来计算出一个hash值。")])]),e._v(" "),i("li",[i("p",[e._v("第三在优先级上，服务器校验优先考虑Etag")])])])])])])]),e._v(" "),i("hr"),e._v(" "),i("h2",{attrs:{id:"缓存过程分析"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#缓存过程分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 缓存过程分析")]),e._v(" "),i("ul",[i("li",[e._v("浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求，那么浏览器怎么确定一个资源该不该缓存，如何去缓存呢？浏览器第一次向服务器发起该请求后拿到请求结果后，将请求结果和缓存标识存入浏览器缓存，浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的。")])]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-de3d6e025582103a?imageMogr2/auto-orient/strip%7CimageView2/2/w/670/format/webp",alt:"image"}})]),e._v(" "),i("ul",[i("li",[i("p",[e._v("浏览器每次发起请求，都会先在浏览器缓存中查找该请求的结果以及缓存标识")])]),e._v(" "),i("li",[i("p",[e._v("浏览器每次拿到返回的请求结果都会将该结果和缓存标识存入浏览器缓存中")])])]),e._v(" "),i("hr"),e._v(" "),i("h2",{attrs:{id:"缓存机制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制","aria-hidden":"true"}},[e._v("#")]),e._v(" 缓存机制")]),e._v(" "),i("p",[e._v("强制缓存优先于协商缓存进行，若强制缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回304，继续使用缓存。具体流程图如下：")]),e._v(" "),i("p",[i("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/3174701-9d9e8b52a18ed35a?imageMogr2/auto-orient/strip%7CimageView2/2/w/519/format/webp",alt:"image"}})])])}],!1,null,null,null);a.default=t.exports}}]);